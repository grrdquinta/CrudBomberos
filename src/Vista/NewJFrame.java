/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Vista;

import Controlador.ControllerBombero;
import Controlador.ControllerFoto;
import Modelo.mdlBombero;
import com.formdev.flatlaf.FlatDarculaLaf;
import com.formdev.flatlaf.themes.FlatMacLightLaf;
import java.awt.List;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.util.ArrayList;
import java.util.Base64;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import jnafilechooser.api.JnaFileChooser;
import org.apache.hc.client5.http.classic.methods.HttpPost;
import org.apache.hc.client5.http.entity.UrlEncodedFormEntity;
import org.apache.hc.client5.http.entity.mime.MultipartEntityBuilder;
import org.apache.hc.client5.http.impl.classic.CloseableHttpClient;
import org.apache.hc.client5.http.impl.classic.CloseableHttpResponse;
import org.apache.hc.client5.http.impl.classic.HttpClients;
import org.apache.hc.core5.http.ContentType;
import org.apache.hc.core5.http.HttpEntity;
import org.apache.hc.core5.http.NameValuePair;
import org.apache.hc.core5.http.ParseException;
import org.apache.hc.core5.http.io.entity.EntityUtils;
import org.apache.hc.core5.http.io.entity.StringEntity;
import org.apache.hc.core5.http.message.BasicNameValuePair;
import org.json.JSONObject;

/**
 *
 * @author gerst
 */
public class NewJFrame extends javax.swing.JFrame {

    /**
     * Creates new form NewJFrame
     */
    public NewJFrame() {
        initComponents();
        setLocationRelativeTo(null);
        NewJFrame thisFrame = this;

        mdlBombero modelo = new mdlBombero();
        ControllerFoto controlador = new ControllerFoto(modelo, thisFrame);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnSubirImagen = new javax.swing.JButton();
        imageLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btnSubirImagen.setText("Subir Imagen");
        btnSubirImagen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSubirImagenActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(292, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btnSubirImagen)
                        .addGap(323, 323, 323))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(imageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(257, 257, 257))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(107, Short.MAX_VALUE)
                .addComponent(imageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(60, 60, 60)
                .addComponent(btnSubirImagen)
                .addGap(193, 193, 193))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSubirImagenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSubirImagenActionPerformed
        /*JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Selecciona una imagen");

        // Solo permitir seleccionar archivos
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        int result = fileChooser.showOpenDialog(null);

        if (result == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();

            try {
                // Subir la imagen a imgBB
                String urlSubida = subirImagenImgbb(selectedFile);

                // Mostrar URL en un JOptionPane
                JOptionPane.showMessageDialog(null, "Imagen subida a: " + urlSubida);
            } catch (Exception ex) {
                ex.printStackTrace();
                JOptionPane.showMessageDialog(null, "Error subiendo la imagen: " + ex.getMessage());
            }
        }*/
        /*JnaFileChooser fileChooser = new JnaFileChooser();
                // Configurar el filtro de archivos para aceptar solo imágenes .jpg y .png
                fileChooser.addFilter("Imágenes (.jpg, .png)", "jpg", "png");
                boolean action = fileChooser.showOpenDialog(null);
                if (action) {
            File selectedFile = fileChooser.getSelectedFile();

            try {
                // Subir la imagen a imgBB
                String urlSubida = subirImagenImgbb(selectedFile);

                // Mostrar URL en un JOptionPane
                JOptionPane.showMessageDialog(null, "Imagen subida a: " + urlSubida);
            } catch (Exception ex) {
                ex.printStackTrace();
                JOptionPane.showMessageDialog(null, "Error subiendo la imagen: " + ex.getMessage());
            }
        }*/
    }//GEN-LAST:event_btnSubirImagenActionPerformed

    private String subirImagenImgbb(File imageFile) throws IOException, ParseException {
    // Cargar la imagen y convertirla en Base64
    byte[] fileContent = Files.readAllBytes(imageFile.toPath());
    String encodedImage = Base64.getEncoder().encodeToString(fileContent);

    // URL de la API de imgBB
    String uploadUrl = "https://api.imgbb.com/1/upload";

    // Reemplaza "YOUR_API_KEY" con tu clave de API de imgBB
    String apiKey = "b2441058fa326d319187dc5545aa9aff";

    // Crear un cliente HTTP
    CloseableHttpClient httpClient = HttpClients.createDefault();
    HttpPost uploadFile = new HttpPost(uploadUrl + "?key=" + apiKey);

    // Crear un cuerpo multipart con la imagen codificada
    MultipartEntityBuilder builder = MultipartEntityBuilder.create();
    builder.addTextBody("image", encodedImage, ContentType.TEXT_PLAIN);

    // Establecer el cuerpo multipart en la solicitud
    HttpEntity multipart = builder.build();
    uploadFile.setEntity(multipart);

    // Ejecutar la solicitud de subida
    CloseableHttpResponse response = httpClient.execute(uploadFile);
    String jsonResponse = EntityUtils.toString(response.getEntity());

    // Imprimir la respuesta completa para verificar su contenido
    System.out.println("Respuesta de la API: " + jsonResponse);

    // Analizar la respuesta JSON para obtener la URL de la imagen
    JSONObject responseObject = new JSONObject(jsonResponse);
    String uploadedUrl = responseObject.getJSONObject("data").getString("url");

    response.close();
    return uploadedUrl;
}
    
    /*public void ImageUploader() {
        // Configurar el botón y la ventana

        btnSubirImagen.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                
                JFileChooser fileChooser = new JFileChooser();
                fileChooser.setDialogTitle("Selecciona una imagen");
                
                // Solo permitir seleccionar archivos
                fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
                int result = fileChooser.showOpenDialog(null);

                if (result == JFileChooser.APPROVE_OPTION) {
                    File selectedFile = fileChooser.getSelectedFile();

                    try {
                        // Subir la imagen a Imgur
                        String urlSubida = subirImagenImgur(selectedFile);
                        
                        // Mostrar URL en un JOptionPane
                        JOptionPane.showMessageDialog(null, "Imagen subida a: " + urlSubida);
                    } catch (Exception ex) {
                        ex.printStackTrace();
                        JOptionPane.showMessageDialog(null, "Error subiendo la imagen: " + ex.getMessage());
                    }
                }
                /*JnaFileChooser fileChooser = new JnaFileChooser();
                // Configurar el filtro de archivos para aceptar solo imágenes .jpg y .png
                fileChooser.addFilter("Imágenes (.jpg, .png)", "jpg", "png");
                boolean action = fileChooser.showOpenDialog(null);
                if (action) {
                File selectedFile = fileChooser.getSelectedFile();
                try {
                        // Subir la imagen a Imgur
                        String urlSubida = subirImagenImgur(selectedFile);
                        
                        // Mostrar URL en un JOptionPane
                        JOptionPane.showMessageDialog(null, "Imagen subida a: " + urlSubida);
                    } catch (Exception ex) {
                        ex.printStackTrace();
                        JOptionPane.showMessageDialog(null, "Error subiendo la imagen: " + ex.getMessage());
                    }
            }

                
                /*
                //JFileChooser fileChooser = new JFileChooser();
                fileChooser.setDialogTitle("Selecciona una imagen");
                
                // Solo permitir seleccionar archivos
                fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
                int result = fileChooser.showOpenDialog(null);

                
            }
        });

    }
    

    
    private String subirImagenImgur(File imageFile) throws IOException, ParseException {
        // Cargar la imagen y convertirla en Base64
        byte[] fileContent = Files.readAllBytes(imageFile.toPath());
        String encodedImage = Base64.getEncoder().encodeToString(fileContent);

        // URL de la API de Imgur
        String uploadUrl = "https://api.imgur.com/3/image";

        // Crear un cliente HTTP
        CloseableHttpClient httpClient = HttpClients.createDefault();
        HttpPost uploadFile = new HttpPost(uploadUrl);

        // Configurar las cabeceras para autenticar la API de Imgur
        uploadFile.addHeader("Authorization", "2b31fe98d89f41a");

        // Crear el JSON para el body de la petición
        JSONObject json = new JSONObject();
        json.put("image", encodedImage);

        // Establecer el JSON como entidad de la petición
        StringEntity entity = new StringEntity(json.toString());
        uploadFile.setEntity(entity);
        uploadFile.addHeader("Content-Type", "application/json");

        // Ejecutar la solicitud de subida
        CloseableHttpResponse response = httpClient.execute(uploadFile);
        String jsonResponse = EntityUtils.toString(response.getEntity());
        
        // Imprimir la respuesta completa para verificar su contenido
        System.out.println("Respuesta de la API: " + jsonResponse);
        
        // Analizar la respuesta JSON para obtener la URL de la imagen
        JSONObject responseObject = new JSONObject(jsonResponse);
        String uploadedUrl = responseObject.getJSONObject("data").getString("link");
        
        response.close();
        return uploadedUrl;
    }*/
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        FlatDarculaLaf.setup();
        //FlatMacDarkLaf.setup();
        //FlatLightLaf.setup();
        UIManager.put("Button.arc", 999);
        UIManager.put("TextComponent.arc", 25);
        
        try {
        UIManager.setLookAndFeel( new FlatMacLightLaf() );
        } catch( Exception ex ) {
            System.err.println( "Failed to initialize LaF" );
        }
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NewJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JButton btnSubirImagen;
    public javax.swing.JLabel imageLabel;
    // End of variables declaration//GEN-END:variables
}
